I"<h1 id="overview">Overview</h1>
<p> </p>
<ul>
  <li>
    <p>Assembly is a human readable form of <a href="https://en.wikipedia.org/wiki/Machine_code" target="_blank">machine code</a>.</p>

    <p>Every application is translated into machine code. <br />
  Learning assembly will allow us to read any application. <br />
  Which will allow us to understand exactly what every application is doing. <br />
  When you know assembly, everything is open-sourced! <br />
  When something is meant to be closed-sourced <br />
  Finding vulnerabilities becomes surprisingly easy. <br />
  When you can essentially read the applications code.</p>
  </li>
  <li>
    <p>Assembly has two syntaxes.</p>

    <p>The syntax “Intel” has nothing to do with <a href="https://en.wikipedia.org/wiki/Intel" target="_blank">Intel</a> the hardware manufacturering company. <br />
  The syntax “AT&amp;T” has nothing do with the <a href="https://en.wikipedia.org/wiki/AT%26T" target="_blank">AT&amp;T</a> phone company. <br />
  (These are just simply the names for the 2 available syntaxes). <br />
  Another way of looking at this:</p>
    <blockquote>
      <p>python2 allows you to output to console using <code class="language-plaintext highlighter-rouge">print "Hello World!"</code>. <br />
python3 allows you to output to console using <code class="language-plaintext highlighter-rouge">print("Hello World!")</code>.</p>
    </blockquote>

    <p>Example: <a href="https://en.wikipedia.org/wiki/X86_assembly_language#Syntax" target="_blank">https://en.wikipedia.org/wiki/X86_assembly_language#Syntax</a></p>

    <p>The python code snippets do the exact same thing, but the syntaxes are different. <br />
  Same applies for the assembly syntaxes “Intel” and “AT&amp;T”.</p>
  </li>
</ul>

<h1 id="understanding-assembly">Understanding assembly</h1>
<p> </p>
<ul>
  <li>Assembly has 3 main concepts. <br />
Instructions, Registers and the Stack. <br />
  I was writing this blog, but I got tired. <br />
  I will complete this tomorrow. :)</li>
</ul>

:ET