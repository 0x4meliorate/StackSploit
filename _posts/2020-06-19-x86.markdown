---
layout: post
title: "x86 Assembly"
date: 2020-06-19
categories: ASM
---

# Overview
&nbsp;
* Assembly is a human readable form of [machine code](https://en.wikipedia.org/wiki/Machine_code){:target="_blank"}.

    Every application is translated into machine code. \\
    Learning assembly will allow us to read any application. \\
    Which will allow us to understand exactly what every application is doing. \\
    When you know assembly, everything is open-sourced! \\
    When something is meant to be closed-sourced: \\
    Finding vulnerabilities becomes surprisingly easy. \\
    When you can essentially read the applications code.\\
    (⊙＿⊙')

* Assembly has two syntaxes.

    The syntax "Intel" has nothing to do with [Intel](https://en.wikipedia.org/wiki/Intel){:target="_blank"} the hardware manufacturering company. \\
    The syntax "AT&T" has nothing do with the [AT&T](https://en.wikipedia.org/wiki/AT%26T){:target="_blank"} phone company. \\
    (These are just simply the names for the 2 available syntaxes). \\
    Another way of looking at this:
    > python2 allows you to output to console using `print "Hello World!"`. \\
    > python3 allows you to output to console using `print("Hello World!")`.

    The python code snippets do the exact same thing, but the syntaxes are different. \\
    Same applies for the assembly syntaxes "Intel" and "AT&T".

    Good example: [https://en.wikipedia.org/wiki/X86_assembly_language#Syntax](https://en.wikipedia.org/wiki/X86_assembly_language#Syntax){:target="_blank"}

&nbsp;
# Understanding assembly
&nbsp;
## Architecures
CPU models use certain architectures. \\
Raspberry Pi's and Phones use ARM CPU's. \\
ARM CPU's are very power efficient, which is why phones use them. \\
Most computers use x64 and x86 CPU's. \\
x86 have 32 bits, x64 have 64 bits. \\
However, 32 bits go into 64 bits. \\
Meaning, writing x86 assembly, will work on x64 CPU's. \\
So for the rest of the guide, we are going to be learning x86 assembly. \\
(In the 'Intel' syntax).

[List of architectures](https://en.wikipedia.org/wiki/Comparison_of_instruction_set_architectures){:target="_blank"} \\
_Scroll down to 'Instruction sets'._

### Instructions
Each CPU architecture has their own instruction sets. \\
These are operations that allow you to preform tasks. \\
So `MOV` in x86 assembly _"copies data from one location to another"_. \\
`ADD` in x86 assembly means as it implies. Adds one value to another. _(1+1)_ \\
Reading the instruction sets below: \\
Gives you a list of instructions that can be preformed on x86 CPU's.

[x86 instruction sets](https://en.wikipedia.org/wiki/X86_instruction_listings#x86_integer_instructions){:target="_blank"}

### Registers
So, so far we have gathered that assembly is very specific to the CPU. \\
Same applies for registers in assembly. \\
So what are registers? \\
Well, to explain this, we first need to understand the types of registers. \\
There are a total of 14 registers in x86 assembly. \\
Along with 35 MIPS registers. \\
They are put into 3 groups:
* Data registers: (These store data).
> 32 bit data registers are EAX, EBX, ECX, EDX. \\
> 16 bit data registers are AX, BX, CX, DX. \\
> 8 bit data registers are AL, BL, CL, DL and AH, BH, CH, DH.

    8 bit registers use higher and lower parts of AX, BX, CX and DX. \\
    `AH` - Higher. \\
    `AL` - Lower.

    ![Table of x86 registers](/assets/images/x86TableRegisters.png)
    [Source](https://www.eecg.utoronto.ca/~amza/www.mindsec.com/files/x86regs.html){:target="_blank"}

* Status registers: _These store the current status of the processor_ \\
* Address registers: _These store the address of the instruction_
