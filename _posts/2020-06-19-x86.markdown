---
layout: post
title: "x86 Assembly"
date: 2020-06-19
categories: ASM
---

# Overview
&nbsp;
* Assembly is a human readable form of [machine code](https://en.wikipedia.org/wiki/Machine_code){:target="_blank"}.

    Every application is translated into machine code. \\
    Learning assembly will allow us to read any application. \\
    Which will allow us to understand exactly what every application is doing. \\
    When you know assembly, everything is open-sourced! \\
    When something is meant to be closed-sourced: \\
    Finding vulnerabilities becomes surprisingly easy. \\
    When you can essentially read the applications code.\\
    (⊙＿⊙')

* Assembly has two syntaxes.

    The syntax "Intel" has nothing to do with [Intel](https://en.wikipedia.org/wiki/Intel){:target="_blank"} the hardware manufacturering company. \\
    The syntax "AT&T" has nothing do with the [AT&T](https://en.wikipedia.org/wiki/AT%26T){:target="_blank"} phone company. \\
    (These are just simply the names for the 2 available syntaxes). \\
    Another way of looking at this:
    > python2 allows you to output to console using `print "Hello World!"`. \\
    > python3 allows you to output to console using `print("Hello World!")`.

    The python code snippets do the exact same thing, but the syntaxes are different. \\
    Same applies for the assembly syntaxes "Intel" and "AT&T".

    Good example: [https://en.wikipedia.org/wiki/X86_assembly_language#Syntax](https://en.wikipedia.org/wiki/X86_assembly_language#Syntax){:target="_blank"}

# Understanding assembly
&nbsp;
* Assembly has 3 main concepts. \\
Instructions, Registers and the Stack. \\
    I was writing this blog, but I got tired. \\
    I will complete this tomorrow. :)
    

