<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>StackSploit</title>
    <description>Blog built upon the knowledge and progression of inspiring hackers.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 20 Jun 2020 10:28:50 +0100</pubDate>
    <lastBuildDate>Sat, 20 Jun 2020 10:28:50 +0100</lastBuildDate>
    <generator>Jekyll v4.1.0</generator>
    
      <item>
        <title>x86 Assembly</title>
        <description>&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt; &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Assembly is a human readable form of &lt;a href=&quot;https://en.wikipedia.org/wiki/Machine_code&quot; target=&quot;_blank&quot;&gt;machine code&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Every application is translated into machine code. &lt;br /&gt;
  Learning assembly will allow us to read any application. &lt;br /&gt;
  Which will allow us to understand exactly what every application is doing. &lt;br /&gt;
  When you know assembly, everything is open-sourced! &lt;br /&gt;
  When something is meant to be closed-sourced: &lt;br /&gt;
  Finding vulnerabilities becomes surprisingly easy. &lt;br /&gt;
  When you can essentially read the applications code.&lt;br /&gt;
  (⊙＿⊙’)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Assembly has two syntaxes.&lt;/p&gt;

    &lt;p&gt;The syntax “Intel” has nothing to do with &lt;a href=&quot;https://en.wikipedia.org/wiki/Intel&quot; target=&quot;_blank&quot;&gt;Intel&lt;/a&gt; the hardware manufacturering company. &lt;br /&gt;
  The syntax “AT&amp;amp;T” has nothing do with the &lt;a href=&quot;https://en.wikipedia.org/wiki/AT%26T&quot; target=&quot;_blank&quot;&gt;AT&amp;amp;T&lt;/a&gt; phone company. &lt;br /&gt;
  (These are just simply the names for the 2 available syntaxes). &lt;br /&gt;
  Another way of looking at this:&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;p&gt;python2 allows you to output to console using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print &quot;Hello World!&quot;&lt;/code&gt;. &lt;br /&gt;
python3 allows you to output to console using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print(&quot;Hello World!&quot;)&lt;/code&gt;.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;The python code snippets do the exact same thing, but the syntaxes are different. &lt;br /&gt;
  Same applies for the assembly syntaxes “Intel” and “AT&amp;amp;T”.&lt;/p&gt;

    &lt;p&gt;Good example: &lt;a href=&quot;https://en.wikipedia.org/wiki/X86_assembly_language#Syntax&quot; target=&quot;_blank&quot;&gt;https://en.wikipedia.org/wiki/X86_assembly_language#Syntax&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h1 id=&quot;understanding-assembly&quot;&gt;Understanding assembly&lt;/h1&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&quot;architecures&quot;&gt;Architecures&lt;/h2&gt;
&lt;p&gt;CPU models use certain architectures. &lt;br /&gt;
Raspberry Pi’s and Phones use ARM CPU’s. &lt;br /&gt;
ARM CPU’s are very power efficient, which is why phones use them. &lt;br /&gt;
Most computers use x64 and x86 CPU’s. &lt;br /&gt;
x86 have 32 bits, x64 have 64 bits. &lt;br /&gt;
However, 32 bits go into 64 bits. &lt;br /&gt;
Meaning, writing x86 assembly, will work on x64 CPU’s. &lt;br /&gt;
So for the rest of the guide, we are going to be learning x86 assembly. &lt;br /&gt;
(In the ‘Intel’ syntax).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Comparison_of_instruction_set_architectures&quot; target=&quot;_blank&quot;&gt;List of architectures&lt;/a&gt; &lt;br /&gt;
&lt;em&gt;Scroll down to ‘Instruction sets’.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;instructions&quot;&gt;Instructions&lt;/h3&gt;
&lt;p&gt;Each CPU architecture has their own instruction sets. &lt;br /&gt;
These are operations that allow you to preform tasks. &lt;br /&gt;
So &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MOV&lt;/code&gt; in x86 assembly &lt;em&gt;“copies data from one location to another”&lt;/em&gt;. &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ADD&lt;/code&gt; in x86 assembly means as it implies. Adds one value to another. &lt;em&gt;(1+1)&lt;/em&gt; &lt;br /&gt;
Reading the instruction sets below: &lt;br /&gt;
Gives you a list of instructions that can be preformed on x86 CPU’s.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/X86_instruction_listings#x86_integer_instructions&quot; target=&quot;_blank&quot;&gt;x86 instruction sets&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;registers&quot;&gt;Registers&lt;/h3&gt;
&lt;p&gt;So, so far we have gathered that assembly is very specific to the CPU. &lt;br /&gt;
Same applies for registers in assembly. &lt;br /&gt;
So what are registers? &lt;br /&gt;
Well, to explain this, we first need to understand the types of registers. &lt;br /&gt;
There are a total of 14 registers in x86 assembly. &lt;br /&gt;
Along with 35 MIPS registers. &lt;br /&gt;
They are put into 3 groups:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Data registers: &lt;em&gt;These hold data&lt;/em&gt;
    &lt;blockquote&gt;
      &lt;p&gt;32 bit data registers are EAX, EBX, ECX, EDX. &lt;br /&gt;
16 bit data registers are AX, BX, CX, DX. &lt;br /&gt;
8 bit data registers are AL, BL, CL, DL and AH, BH, CH, DH.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;8 bit registers use higher and lower parts of AX, BX, CX and DX. &lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AH&lt;/code&gt; - Higher. &lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AL&lt;/code&gt; - Lower.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://www.eecg.utoronto.ca/~amza/www.mindsec.com/files/x86regs.html&quot; target=&quot;_blank&quot;&gt;List of x86 Registers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Status registers: &lt;em&gt;These store the current status of the processor&lt;/em&gt; \&lt;/li&gt;
  &lt;li&gt;Address registers: &lt;em&gt;These store the address of the instruction&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 19 Jun 2020 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/asm/2020/06/19/x86.html</link>
        <guid isPermaLink="true">http://localhost:4000/asm/2020/06/19/x86.html</guid>
        
        
        <category>ASM</category>
        
      </item>
    
  </channel>
</rss>
